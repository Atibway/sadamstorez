
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

// datasource db {
//   provider  = "mysql"
//   url  	    = env("DATABASE_URL")
// }

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone String @default("")
  city String @default("")
  country String @default("")
  role          UserRole @default(USER)
  accounts      Account[]
  Order Order[]
  review Review[]
  isTwoFactorEnabled Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 

model store {
    id       String   @id @default(uuid())
    name     String   @unique
    billboard Billboard[] @relation("StoreToBillboard")
    categories Category[] @relation("StoreToCategory")
    sizes        Size[] @relation("StoreTosize")
    colors        Color[] @relation("StoreToColor")
    products      Product[] @relation("StoreToProduct")
    orders       Order[] @relation("StoreToOrder")
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Billboard {
    id     String @id @default(uuid())
    storeId String
    store store @relation("StoreToBillboard", fields: [storeId], references: [id])
     label String
     categories Category[]
     createdAt DateTime @default(now())
  BillboardImages BillboardImages[]
  updatedAt DateTime @updatedAt
    @@index([storeId])
}

model BillboardImages {
id String @id @default(uuid())
name String
url String 
billboardId String
course Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

  @@index([billboardId])
 }

model Category {
  id String @id @default(uuid())
  storeId String
  store store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  products Product[] @relation("CategoryToProduct")
  name String
  icon        String@db.Text
  subcategories Subcategory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    @@index([storeId])
    @@index([billboardId])
}

model Subcategory {
  id         String   @id @default(cuid())
  name       String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Product Product[] @relation("subCategoryToProduct")
}


model Size {
  id String @id @default(uuid())
  storeId String
  store store @relation("StoreTosize", fields: [storeId], references: [id])
  name String
  value String
  product Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
    @@index([storeId])
}
model Color {
  id String @id @default(uuid())
  storeId String
  store store @relation("StoreToColor", fields: [storeId], references: [id])
  name String
  value String
  product Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
    @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  subcategoryId String
  description String @db.Text
  countInStock Int
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subCategory Subcategory @relation( "subCategoryToProduct", fields: [subcategoryId], references: [id])
  name String
  price Decimal
  priceDiscount Int
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])
  colorId String
  color Color @relation(fields: [colorId], references: [id])
  images Image[]
  orderItem OrderItem[]
  reviews Review[]
  rating Int? @default(0)
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([storeId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sizeId])
  @@index([colorId])
}


model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  store store @relation("StoreToOrder", fields: [storeId], references: [id])
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPending Boolean @default(false)
  delivered Boolean @default(false)
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  description String @db.Text
  quantity Int
  name String
  price Decimal
  priceDiscount Int
  rating Int? @default(0)
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([orderId])
  @@index([productId])
}

model Review {
   id String @id @default(uuid())
   name String 
   rating Int
   comment String @db.Text
   userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
   productId String
  product Product @relation(fields: [productId], references: [id])
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}